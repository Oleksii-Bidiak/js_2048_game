{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/utils/const.js","src/modules/Cell.class.js","src/modules/Tile.class.js"],"sourcesContent":["/* eslint-disable no-useless-return */ /* eslint-disable function-paren-newline */ const $7d620a2e0065cb02$export$ed83628311d3f442 = {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n};\n\n\nclass $03bae4f354eafb0f$export$f6f0c3fe4ec306ea {\n    constructor(gameField, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"field-cell\");\n        gameField.append(cell);\n        this.x = x;\n        this.y = y;\n        this.linkedTile = null;\n        this.linkedTileForMerge = null;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        const newValue = this.linkedTile.value + this.linkedTileForMerge.value;\n        const mergedTile = this.linkedTile.tileElement;\n        mergedTile.classList.add(\"merge\");\n        mergedTile.addEventListener(\"animationend\", ()=>{\n            mergedTile.classList.remove(\"merge\");\n        }, {\n            once: true\n        });\n        this.linkedTile.setValue(newValue);\n        this.linkedTileForMerge.removeFromDom();\n        this.unlinkTileForMerge();\n        return newValue;\n    }\n}\n\n\nclass $a3a4bece0086b835$export$235cb65c20ad2b7 {\n    constructor(gameField){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\", \"field-cell\", \"show\");\n        this.setValue(Math.random() > 0.1 ? 2 : 4);\n        this.tileElement.textContent = this.value;\n        gameField.append(this.tileElement);\n        this.tileElement.addEventListener(\"animationend\", ()=>{\n            this.tileElement.classList.remove(\"show\");\n        }, {\n            once: true\n        });\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        this.value = value;\n        this.tileElement.textContent = this.value;\n        this.tileElement.classList.forEach((cls)=>{\n            if (cls.startsWith(\"field-cell--\")) this.tileElement.classList.remove(cls);\n        });\n        this.tileElement.classList.add(`field-cell--${this.value}`);\n    }\n    removeFromDom() {\n        this.tileElement.remove();\n    }\n    waitForTransitionEnd() {\n        return new Promise((resolve, reject)=>{\n            this.tileElement.addEventListener(\"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\nconst $a5fd07fa01589658$var$FIEL_DSIZE = 4;\nconst $a5fd07fa01589658$var$CELLS_COUNT = $a5fd07fa01589658$var$FIEL_DSIZE * $a5fd07fa01589658$var$FIEL_DSIZE;\nclass $a5fd07fa01589658$export$47be4d1a60c35b64 {\n    constructor(gameField){\n        this.gameField = gameField;\n        this.cells = [];\n        this.status = (0, $7d620a2e0065cb02$export$ed83628311d3f442).idle;\n        this.score = 0;\n        for(let i = 0; i < $a5fd07fa01589658$var$CELLS_COUNT; i++)this.cells.push(new (0, $03bae4f354eafb0f$export$f6f0c3fe4ec306ea)(gameField, i % $a5fd07fa01589658$var$FIEL_DSIZE, Math.floor(i / $a5fd07fa01589658$var$FIEL_DSIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupByRow = this.groupCellsByRow();\n        this.cellsGroupByReversRow = this.cellsGroupByRow.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    /**\n   * Start the game.\n   */ start() {\n        this.status = (0, $7d620a2e0065cb02$export$ed83628311d3f442).playing;\n        this.getRandomEmptyCell().linkTile(new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)(this.gameField));\n        this.getRandomEmptyCell().linkTile(new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)(this.gameField));\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.cells.forEach((cell)=>{\n            if (cell.linkedTile) {\n                cell.linkedTile.removeFromDom();\n                cell.unlinkTile();\n            }\n        });\n        this.status = (0, $7d620a2e0065cb02$export$ed83628311d3f442).idle;\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    async slideTiles(groupedCells) {\n        const transitionPromises = [];\n        groupedCells.forEach((group)=>this.slideTilesInGroup(group, transitionPromises));\n        await Promise.all(transitionPromises);\n        this.cells.forEach((cell)=>{\n            if (cell.hasTileForMerge()) this.score += cell.mergeTiles();\n        });\n    }\n    slideTilesInGroup(group, promises) {\n        for(let i = 1; i < group.length; i++){\n            if (group[i].isEmpty()) continue;\n            const cellWithTile = group[i];\n            let targetCell;\n            let j = i - 1;\n            while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n                targetCell = group[j];\n                j--;\n            }\n            if (!targetCell) continue;\n            promises.push(cellWithTile.linkTile.waitForTransitionEnd);\n            if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n            else targetCell.linkTileForMerge(cellWithTile.linkedTile);\n            cellWithTile.unlinkTile();\n        }\n    }\n    canMove(groupedCells) {\n        return groupedCells.some((group)=>this.canMoveInGroup(group));\n    }\n    canMoveInGroup(group) {\n        return group.some((cell, index)=>{\n            if (index === 0 || cell.isEmpty()) return false;\n            return group[index - 1].canAccept(cell.linkedTile);\n        });\n    }\n    canPlay() {\n        if (!this.canMove(this.cellsGroupedByColumn) && !this.canMove(this.cellsGroupedByReversColumn) && !this.canMove(this.cellsGroupByRow) && !this.canMove(this.cellsGroupByReversRow)) this.status = (0, $7d620a2e0065cb02$export$ed83628311d3f442).lose;\n    }\n    async moveUp() {\n        await this.move(this.cellsGroupedByColumn);\n    }\n    async moveDown() {\n        await this.move(this.cellsGroupedByReversColumn);\n    }\n    async moveLeft() {\n        await this.move(this.cellsGroupByRow);\n    }\n    async moveRight() {\n        await this.move(this.cellsGroupByReversRow);\n    }\n    async move(direction) {\n        if (this.canMove(direction)) {\n            const newTile = new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)(this.gameField);\n            await this.slideTiles(direction);\n            this.getRandomEmptyCell().linkTile(newTile);\n        }\n        this.canPlay();\n    }\n}\n\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$47be4d1a60c35b64)($09e991522ca7e64e$var$gameField);\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst [$09e991522ca7e64e$var$lose, $09e991522ca7e64e$var$win, $09e991522ca7e64e$var$start] = document.querySelector(\".message-container\").children;\nasync function $09e991522ca7e64e$var$handleKeydown(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            await $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            await $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            await $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            await $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, $7d620a2e0065cb02$export$ed83628311d3f442).lose) {\n        window.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\n        $09e991522ca7e64e$var$lose.classList.remove(\"hidden\");\n    } else if ($09e991522ca7e64e$var$game.getStatus() === (0, $7d620a2e0065cb02$export$ed83628311d3f442).win) {\n        window.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\n        $09e991522ca7e64e$var$win.classList.remove(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    if (e.target.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$start.classList.add(\"hidden\");\n        window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\n    } else if (e.target.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$start.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$lose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$win.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n        window.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\n    }\n});\n\n\n//# sourceMappingURL=index.2e7b9320.js.map\n","/* eslint-disable no-useless-return */\r\n'use strict';\r\n\r\nimport { GameField } from '../modules/Game.class';\r\nimport { gameStatus } from '../utils/const';\r\n\r\nconst gameField = document.querySelector('.game-field');\r\nconst button = document.querySelector('.button');\r\nconst game = new GameField(gameField);\r\nconst score = document.querySelector('.game-score');\r\nconst [lose, win, start] =\r\n  document.querySelector('.message-container').children;\r\n\r\nasync function handleKeydown(e) {\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n      await game.moveUp();\r\n      break;\r\n\r\n    case 'ArrowDown':\r\n      await game.moveDown();\r\n      break;\r\n\r\n    case 'ArrowLeft':\r\n      await game.moveLeft();\r\n      break;\r\n\r\n    case 'ArrowRight':\r\n      await game.moveRight();\r\n      break;\r\n  }\r\n\r\n  score.textContent = game.getScore();\r\n\r\n  if (game.getStatus() === gameStatus.lose) {\r\n    window.removeEventListener('keydown', handleKeydown);\r\n    lose.classList.remove('hidden');\r\n  } else if (game.getStatus() === gameStatus.win) {\r\n    window.removeEventListener('keydown', handleKeydown);\r\n    win.classList.remove('hidden');\r\n  }\r\n}\r\n\r\nbutton.addEventListener('click', (e) => {\r\n  if (e.target.classList.contains('start')) {\r\n    game.start();\r\n    button.classList.remove('start');\r\n    button.classList.add('restart');\r\n    button.textContent = 'Restart';\r\n    start.classList.add('hidden');\r\n    window.addEventListener('keydown', handleKeydown);\r\n  } else if (e.target.classList.contains('restart')) {\r\n    game.restart();\r\n    button.classList.add('start');\r\n    button.classList.remove('restart');\r\n    button.textContent = 'Start';\r\n    start.classList.remove('hidden');\r\n    lose.classList.add('hidden');\r\n    win.classList.add('hidden');\r\n    score.textContent = game.getScore();\r\n    window.removeEventListener('keydown', handleKeydown);\r\n  }\r\n});\r\n","/* eslint-disable function-paren-newline */\nimport { gameStatus } from '../utils/const';\nimport { Cell } from './Cell.class';\nimport { Tile } from './Tile.class';\n\nconst FIEL_DSIZE = 4;\nconst CELLS_COUNT = FIEL_DSIZE * FIEL_DSIZE;\n\nexport class GameField {\n  constructor(gameField) {\n    this.gameField = gameField;\n    this.cells = [];\n    this.status = gameStatus.idle;\n    this.score = 0;\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gameField, i % FIEL_DSIZE, Math.floor(i / FIEL_DSIZE)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversColumn = this.cellsGroupedByColumn.map((column) =>\n      [...column].reverse(),\n    );\n\n    this.cellsGroupByRow = this.groupCellsByRow();\n\n    this.cellsGroupByReversRow = this.cellsGroupByRow.map((row) =>\n      [...row].reverse(),\n    );\n  }\n\n  /**\n   * Start the game.\n   */\n  start() {\n    this.status = gameStatus.playing;\n    this.getRandomEmptyCell().linkTile(new Tile(this.gameField));\n    this.getRandomEmptyCell().linkTile(new Tile(this.gameField));\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.cells.forEach((cell) => {\n      if (cell.linkedTile) {\n        cell.linkedTile.removeFromDom();\n        cell.unlinkTile();\n      }\n    });\n    this.status = gameStatus.idle;\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  async slideTiles(groupedCells) {\n    const transitionPromises = [];\n\n    groupedCells.forEach((group) =>\n      this.slideTilesInGroup(group, transitionPromises),\n    );\n\n    await Promise.all(transitionPromises);\n\n    this.cells.forEach((cell) => {\n      if (cell.hasTileForMerge()) {\n        this.score += cell.mergeTiles();\n      }\n    });\n  }\n\n  slideTilesInGroup(group, promises) {\n    for (let i = 1; i < group.length; i++) {\n      if (group[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = group[i];\n      let targetCell;\n      let j = i - 1;\n\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = group[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      promises.push(cellWithTile.linkTile.waitForTransitionEnd);\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else {\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n      }\n\n      cellWithTile.unlinkTile();\n    }\n  }\n\n  canMove(groupedCells) {\n    return groupedCells.some((group) => this.canMoveInGroup(group));\n  }\n\n  canMoveInGroup(group) {\n    return group.some((cell, index) => {\n      if (index === 0 || cell.isEmpty()) {\n        return false;\n      }\n\n      return group[index - 1].canAccept(cell.linkedTile);\n    });\n  }\n\n  canPlay() {\n    if (\n      !this.canMove(this.cellsGroupedByColumn) &&\n      !this.canMove(this.cellsGroupedByReversColumn) &&\n      !this.canMove(this.cellsGroupByRow) &&\n      !this.canMove(this.cellsGroupByReversRow)\n    ) {\n      this.status = gameStatus.lose;\n    }\n  }\n\n  async moveUp() {\n    await this.move(this.cellsGroupedByColumn);\n  }\n  async moveDown() {\n    await this.move(this.cellsGroupedByReversColumn);\n  }\n  async moveLeft() {\n    await this.move(this.cellsGroupByRow);\n  }\n  async moveRight() {\n    await this.move(this.cellsGroupByReversRow);\n  }\n\n  async move(direction) {\n    if (this.canMove(direction)) {\n      const newTile = new Tile(this.gameField);\n\n      await this.slideTiles(direction);\n\n      this.getRandomEmptyCell().linkTile(newTile);\n    }\n\n    this.canPlay();\n  }\n}\n","export const gameStatus = {\r\n  idle: 'idle',\r\n  playing: 'playing',\r\n  win: 'win',\r\n  lose: 'lose',\r\n};\r\n","export class Cell {\r\n  constructor(gameField, x, y) {\r\n    const cell = document.createElement('div');\r\n\r\n    cell.classList.add('field-cell');\r\n    gameField.append(cell);\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.linkedTile = null;\r\n    this.linkedTileForMerge = null;\r\n  }\r\n\r\n  linkTile(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.linkedTile = tile;\r\n  }\r\n\r\n  linkTileForMerge(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.linkedTileForMerge = tile;\r\n  }\r\n\r\n  hasTileForMerge() {\r\n    return !!this.linkedTileForMerge;\r\n  }\r\n\r\n  isEmpty() {\r\n    return !this.linkedTile;\r\n  }\r\n\r\n  unlinkTile() {\r\n    this.linkedTile = null;\r\n  }\r\n\r\n  unlinkTileForMerge() {\r\n    this.linkedTileForMerge = null;\r\n  }\r\n\r\n  canAccept(newTile) {\r\n    return (\r\n      this.isEmpty() ||\r\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\r\n    );\r\n  }\r\n\r\n  mergeTiles() {\r\n    const newValue = this.linkedTile.value + this.linkedTileForMerge.value;\r\n    const mergedTile = this.linkedTile.tileElement;\r\n\r\n    mergedTile.classList.add('merge');\r\n\r\n    mergedTile.addEventListener(\r\n      'animationend',\r\n      () => {\r\n        mergedTile.classList.remove('merge');\r\n      },\r\n      { once: true },\r\n    );\r\n\r\n    this.linkedTile.setValue(newValue);\r\n    this.linkedTileForMerge.removeFromDom();\r\n    this.unlinkTileForMerge();\r\n\r\n    return newValue;\r\n  }\r\n}\r\n","export class Tile {\r\n  constructor(gameField) {\r\n    this.tileElement = document.createElement('div');\r\n    this.tileElement.classList.add('tile', 'field-cell', 'show');\r\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\r\n    this.tileElement.textContent = this.value;\r\n    gameField.append(this.tileElement);\r\n\r\n    this.tileElement.addEventListener(\r\n      'animationend',\r\n      () => {\r\n        this.tileElement.classList.remove('show');\r\n      },\r\n      { once: true },\r\n    );\r\n  }\r\n\r\n  setXY(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.tileElement.style.setProperty('--x', x);\r\n    this.tileElement.style.setProperty('--y', y);\r\n  }\r\n\r\n  setValue(value) {\r\n    this.value = value;\r\n    this.tileElement.textContent = this.value;\r\n\r\n    this.tileElement.classList.forEach((cls) => {\r\n      if (cls.startsWith('field-cell--')) {\r\n        this.tileElement.classList.remove(cls);\r\n      }\r\n    });\r\n    this.tileElement.classList.add(`field-cell--${this.value}`);\r\n  }\r\n\r\n  removeFromDom() {\r\n    this.tileElement.remove();\r\n  }\r\n\r\n  waitForTransitionEnd() {\r\n    return new Promise((resolve, reject) => {\r\n      this.tileElement.addEventListener('transitionend', resolve, {\r\n        once: true,\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"names":["$7d620a2e0065cb02$export$ed83628311d3f442","idle","playing","win","lose","$03bae4f354eafb0f$export$f6f0c3fe4ec306ea","constructor","gameField","x","y","cell","document","createElement","classList","add","append","linkedTile","linkedTileForMerge","linkTile","tile","setXY","linkTileForMerge","hasTileForMerge","isEmpty","unlinkTile","unlinkTileForMerge","canAccept","newTile","value","mergeTiles","newValue","mergedTile","tileElement","addEventListener","remove","once","setValue","removeFromDom","$a3a4bece0086b835$export$235cb65c20ad2b7","Math","random","textContent","style","setProperty","forEach","cls","startsWith","waitForTransitionEnd","Promise","resolve","reject","$09e991522ca7e64e$var$gameField","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$game","cells","status","score","i","$a5fd07fa01589658$var$FIEL_DSIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversColumn","map","column","reverse","cellsGroupByRow","groupCellsByRow","cellsGroupByReversRow","row","start","getRandomEmptyCell","restart","getScore","getStatus","emptyCells","filter","randomIndex","length","reduce","groupedCells","slideTiles","transitionPromises","group","slideTilesInGroup","all","promises","targetCell","cellWithTile","j","canMove","some","canMoveInGroup","index","canPlay","moveUp","move","moveDown","moveLeft","moveRight","direction","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$lose","$09e991522ca7e64e$var$win","$09e991522ca7e64e$var$start","children","$09e991522ca7e64e$var$handleKeydown","e","key","window","removeEventListener","target","contains"],"version":3,"file":"index.2e7b9320.js.map"}